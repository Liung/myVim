snippet #!
	#!/usr/bin/python
snippet #
	#!/usr/bin/python
	#coding:utf-8
	#Author: LiuChao
snippet pyqt
	import sys
	from PyPyQt4.QtCore import *
	from PyPyQt4.QtGui import *
	class ${1:classname}:
		def __init__(self):
			super(${2:classname},self).__init__()
			self.initUI()
		def initUI(self):
			${3:initUI}
	def main():
		app = QApplication(sys.argv)
		${4:TODO}
		sys.exit(app.exec_())
	if __name__ == "__main__":
		main()

snippet pyside
	import sys
	from PySide.QtCore import *
	from PySide.QtGui import *
	class ${1:classname}:
		def __init__(self):
			super(${2:classname},self).__init__()
			self.initUI()
		def initUI(self):
			${3:initUI}
	def main():
		app = QApplication(sys.argv)
		${4:TODO}
		sys.exit(app.exec_())
	if __name__ == "__main__":
		main()

snippet im
	import ${1:module}
snippet imas
	import ${1:module} as ${2:alias}
snippet frim
	from ${1:module} import ${2:modORfun}
snippet imnp
	import numpy as np
snippet imsp
	import scipy as sp
snippet immpl
	import matplotlib as mpl
snippet implt
	import matplotlib.pyplot as plt
snippet impl
	import matplotlib.pyplab as pl

# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet lam
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
